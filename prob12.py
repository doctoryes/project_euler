#!/usr/bin/env python
# -*- coding: latin-1 -*-

# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
# 
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# 
# Let us list the factors of the first seven triangle numbers:
# 
#      1: 1
#      3: 1,3
#      6: 1,2,3,6
#     10: 1,2,5,10
#     15: 1,3,5,15
#     21: 1,3,7,21
#     28: 1,2,4,7,14,28
# 
# We can see that 28 is the first triangle number to have over five divisors.
# 
# What is the value of the first triangle number to have over five hundred divisors?

def factor_list(factors, debug=False):
   # Look at each number in the list of factors.
   for num in factors:

      if debug:
         print "num=", num

      # Start at 2. Increment, looking for factors, until reaching the limit of 1/2 the number.
      i = 2
      while i < num / 2 + 1:

         if debug:
            print "Trying i=", i

         if num % i == 0:

            if debug:
               print "Factor found!"
               print factors, " -> ",

            # Remove the original number.
            factors.remove(num)

            # Add the two factors.
            factors.append(i)
            factors.append(num / i)

            if debug:
               print "Current factors: ", factors

            return (factors, True)

         else:
            # Not a factor, so increment.
            i += 1

   # No additional factors where found.
   return (factors, False)


def all_unique_divisors(num, divisors, debug=False):
   # Start at 1.
   i = 1

   # Increment, looking for divisors, until reaching the limit of 1/2 the number.
   while i < num / 2 + 1:

      # if debug:
      #    print "Trying i=", i

      if num % i == 0:

         new_one = False

         # Add the two divisors.
         if i not in divisors:
            divisors.append(i)
            new_one = True
         if (num / i) not in divisors:
            divisors.append(num / i)
            new_one = True

         if debug and new_one:
            print "Current divisors: ", divisors

      i += 1

   return divisors



def main():
   i = 0
   curr_triangle_number = 0

   while True:
      # Compute next triangle number.
      i += 1
      curr_triangle_number += i

      print "%7d: Current triangle number: %d" % (i, curr_triangle_number)

      divisors = []
      divisors = all_unique_divisors(curr_triangle_number, divisors)
      print "Number of factors: %d" % len(divisors)
      print
      if len(divisors) >= 500:
         print "Answer: %d is triangle number %d and has divisors:" % (curr_triangle_number, i)
         print divisors
         break

if __name__ == "__main__":
    main()
